type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'

    android {
        compileSdkVersion 28

        defaultConfig {
            applicationId "org.hyperskill.calculator"
            minSdkVersion 21
            // DO NOT CHANGE THIS VALUE
            // Because this version related with robolectic version too
            // [Robolectric] WARN: Android SDK 29 requires Java 9. Tests won't be run on SDK 29 unless explicitly requested.
            targetSdkVersion 28
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "com.edu.AndroidEduTestRunner"
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        implementation 'androidx.core:core-ktx:1.3.2'
        implementation 'androidx.appcompat:appcompat:1.2.0'
        implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

        testImplementation 'junit:junit:4.12'

        def material = "1.3.0-beta01"
        implementation "com.google.android.material:material:$material"

        def espressoCore = "3.3.0"
        androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCore"

        def testRules = "1.3.0"
        androidTestImplementation "androidx.test:rules:$testRules"

        def extJUnit = "1.1.2"
        androidTestImplementation "androidx.test.ext:junit:$extJUnit"

        // Robolectric
        // http://robolectric.org
        def robolectric = "4.3.1"
        testImplementation "org.robolectric:robolectric:$robolectric"
    }
  learner_created: false
- name: src/main/res/layout/activity_main.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent">

    </androidx.constraintlayout.widget.ConstraintLayout>
  learner_created: false
- name: src/main/res/values/colors.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <color name="colorPrimary">#008577</color>
        <color name="colorPrimaryDark">#00574B</color>
        <color name="colorAccent">#D81B60</color>
    </resources>
  learner_created: false
- name: src/main/res/values/styles.xml
  visible: true
  text: |
    <resources>

        <!-- Base application theme. -->
        <style name="AppTheme" parent="Theme.MaterialComponents.Light.DarkActionBar">
            <!-- Customize your theme here. -->
            <item name="colorPrimary">@color/colorPrimary</item>
            <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
            <item name="colorAccent">@color/colorAccent</item>
        </style>

    </resources>
  learner_created: false
- name: src/main/res/values/strings.xml
  visible: true
  text: |-
    <resources>
        <string name="app_name">Basic Calculator</string>
    </resources>
  learner_created: false
- name: src/main/res/drawable/ic_launcher_background.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillColor="#008577"
            android:pathData="M0,0h108v108h-108z" />
        <path
            android:fillColor="#00000000"
            android:pathData="M9,0L9,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,0L19,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,0L29,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,0L39,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,0L49,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,0L59,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,0L69,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,0L79,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M89,0L89,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M99,0L99,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,9L108,9"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,19L108,19"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,29L108,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,39L108,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,49L108,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,59L108,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,69L108,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,79L108,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,89L108,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,99L108,99"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,29L89,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,39L89,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,49L89,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,59L89,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,69L89,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,79L89,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,19L29,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,19L39,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,19L49,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,19L59,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,19L69,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,19L79,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
    </vector>
  learner_created: false
- name: src/main/res/drawable-v24/ic_launcher_foreground.xml
  visible: true
  text: |
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:aapt="http://schemas.android.com/aapt"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillType="evenOdd"
            android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000">
            <aapt:attr name="android:fillColor">
                <gradient
                    android:endX="78.5885"
                    android:endY="90.9159"
                    android:startX="48.7653"
                    android:startY="61.0927"
                    android:type="linear">
                    <item
                        android:color="#44000000"
                        android:offset="0.0" />
                    <item
                        android:color="#00000000"
                        android:offset="1.0" />
                </gradient>
            </aapt:attr>
        </path>
        <path
            android:fillColor="#FFFFFF"
            android:fillType="nonZero"
            android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000" />
    </vector>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/AndroidManifest.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="org.hyperskill.calculator">

      <application
          android:allowBackup="true"
          android:icon="@mipmap/ic_launcher"
          android:label="@string/app_name"
          android:roundIcon="@mipmap/ic_launcher_round"
          android:supportsRtl="true"
          android:theme="@style/AppTheme">
        <activity android:name="org.hyperskill.calculator.MainActivity">
          <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
          </intent-filter>
        </activity>
      </application>

    </manifest>
  learner_created: false
- name: src/main/java/org/hyperskill/calculator/MainActivity.kt
  visible: true
  text: |-
    package org.hyperskill.calculator

    import android.os.Bundle
    import androidx.appcompat.app.AppCompatActivity

    class MainActivity : AppCompatActivity() {
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
        }
    }
  learner_created: false
- name: src/test/java/resources/robolectric.properties
  visible: false
  text: sdk=28
  learner_created: false
- name: src/test/java/org/hyperskill/calculator/Stage1UnitTest.kt
  visible: false
  text: |-
    package org.hyperskill.calculator

    import android.view.View
    import android.view.inputmethod.EditorInfo
    import android.widget.Button
    import android.widget.EditText
    import org.junit.Assert.*
    import org.junit.Test
    import org.junit.runner.RunWith
    import org.robolectric.Robolectric
    import org.robolectric.RobolectricTestRunner

    @RunWith(RobolectricTestRunner::class)
    class Stage1UnitTest {

        private val idWarningMessage = "Can't find a View with this ID: "
        private val activityController = Robolectric.buildActivity(MainActivity::class.java)
        private val activity = activityController.setup().get()
        private val editTextID = activity.resources.getIdentifier("editText", "id", activity.packageName)
        private val button0ID = activity.resources.getIdentifier("button0", "id", activity.packageName)
        private val button1ID = activity.resources.getIdentifier("button1", "id", activity.packageName)
        private val button2ID = activity.resources.getIdentifier("button2", "id", activity.packageName)
        private val button3ID = activity.resources.getIdentifier("button3", "id", activity.packageName)
        private val button4ID = activity.resources.getIdentifier("button4", "id", activity.packageName)
        private val button5ID = activity.resources.getIdentifier("button5", "id", activity.packageName)
        private val button6ID = activity.resources.getIdentifier("button6", "id", activity.packageName)
        private val button7ID = activity.resources.getIdentifier("button7", "id", activity.packageName)
        private val button8ID = activity.resources.getIdentifier("button8", "id", activity.packageName)
        private val button9ID = activity.resources.getIdentifier("button9", "id", activity.packageName)
        private val clearButtonID = activity.resources.getIdentifier("clearButton", "id", activity.packageName)
        private val equalButtonID = activity.resources.getIdentifier("equalButton", "id", activity.packageName)
        private val addButtonID = activity.resources.getIdentifier("addButton", "id", activity.packageName)
        private val subtractButtonID = activity.resources.getIdentifier("subtractButton", "id", activity.packageName)
        private val multiplyButtonID = activity.resources.getIdentifier("multiplyButton", "id", activity.packageName)
        private val divideButtonID = activity.resources.getIdentifier("divideButton", "id", activity.packageName)
        private val dotButtonID = activity.resources.getIdentifier("dotButton", "id", activity.packageName)


        @Test
        fun testShouldCheckEditTextExist() {
            val typeMismatch = "editText doesn't seem to be an EditText. Make sure you've chosen a correct View type."
            assertFalse(idWarningMessage + "editText", 0 == editTextID)
            val editText = activity.findViewById<View?>(editTextID)
            assertTrue(typeMismatch, editText is EditText)
            val message = "Was view with id \"editText\" placed in activity?"
            assertNotNull(message, editText)

        }

        @Test
        fun testShouldCheckEditTextContainZero() {
            val typeMismatch = "editText doesn't seem to be an EditText. Make sure you've chosen a correct View type."
            val editTextAsView = activity.findViewById<View?>(editTextID)
            assertTrue(typeMismatch, editTextAsView is EditText)
            val editText = activity.findViewById<EditText>(editTextID)
            val text = editText.text.toString()
            val message = "The editText with id \"editText\" should contain \"0\" in the property text."
            assertEquals(message, "0", text)
        }

        @Test
        fun testShouldCheckEditTextHintIsSetToZero() {
            val typeMismatch = "editText doesn't seem to be an EditText. Make sure you've chosen a correct View type."
            val editTextAsView = activity.findViewById<View?>(editTextID)
            assertTrue(typeMismatch, editTextAsView is EditText)
            val editText = activity.findViewById<EditText>(editTextID)
            val hint = editText.hint.toString()
            val message = "Check whether editText with id \"editText\" has 0 set as a hint"
            assertEquals(message, "0", hint)
        }

        @Test
        fun testShouldCheckButtonsExist() {
            val button0 = activity.findViewById<View?>(button0ID)
            val button1 = activity.findViewById<View?>(button1ID)
            val button2 = activity.findViewById<View?>(button2ID)
            val button3 = activity.findViewById<View?>(button3ID)
            val button4 = activity.findViewById<View?>(button4ID)
            val button5 = activity.findViewById<View?>(button5ID)
            val button6 = activity.findViewById<View?>(button6ID)
            val button7 = activity.findViewById<View?>(button7ID)
            val button8 = activity.findViewById<View?>(button8ID)
            val button9 = activity.findViewById<View?>(button9ID)
            val clearButton = activity.findViewById<View?>(clearButtonID)
            val equalButton = activity.findViewById<View?>(equalButtonID)
            val addButton = activity.findViewById<View?>(addButtonID)
            val subtractButton = activity.findViewById<View?>(subtractButtonID)
            val multiplyButton = activity.findViewById<View?>(multiplyButtonID)
            val divideButton = activity.findViewById<View?>(divideButtonID)
            val dotButton = activity.findViewById<View?>(dotButtonID)
            val typeMismatch = " doesn't seem to be a Button. Make sure you've chosen a correct View type."
            val message = "is view with id \"button0\" placed in activity?"
            assertFalse(idWarningMessage + "button0", button0ID == 0)
            assertTrue("button0$typeMismatch", button0 is Button)
            assertNotNull(message, button0)
            val message1 = "is view with id \"button1\" placed in activity?"
            assertFalse(idWarningMessage + "button1", button1ID == 0)
            assertTrue("button1$typeMismatch", button1 is Button)
            assertNotNull(message1, button1)
            val message2 = "is view with id \"button2\" placed in activity?"
            assertFalse(idWarningMessage + "button2", button2ID == 0)
            assertTrue("button2$typeMismatch", button2 is Button)
            assertNotNull(message2, button2)
            val message3 = "is view with id \"button3\" placed in activity?"
            assertFalse(idWarningMessage + "button3", button3ID == 0)
            assertTrue("button3$typeMismatch", button3 is Button)
            assertNotNull(message3, button3)
            val message4 = "is view with id \"button4\" placed in activity?"
            assertFalse(idWarningMessage + "button4", button4ID == 0)
            assertTrue("button4$typeMismatch", button4 is Button)
            assertNotNull(message4, button4)
            val message5 = "is view with id \"button5\" placed in activity?"
            assertFalse(idWarningMessage + "button5", button5ID == 0)
            assertTrue("button5$typeMismatch", button5 is Button)
            assertNotNull(message5, button5)
            val message6 = "is view with id \"button6\" placed in activity?"
            assertFalse(idWarningMessage + "button6", button6ID == 0)
            assertTrue("button6$typeMismatch", button6 is Button)
            assertNotNull(message6, button6)
            val message7 = "is view with id \"button7\" placed in activity?"
            assertFalse(idWarningMessage + "button7", button7ID == 0)
            assertTrue("button7$typeMismatch", button7 is Button)
            assertNotNull(message7, button7)
            val message8 = "is view with id \"button8\" placed in activity?"
            assertFalse(idWarningMessage + "button8", button8ID == 0)
            assertTrue("button8$typeMismatch", button8 is Button)
            assertNotNull(message8, button8)
            val message9 = "is view with id \"button9\" placed in activity?"
            assertFalse(idWarningMessage + "button9", button9ID == 0)
            assertTrue("button9$typeMismatch", button9 is Button)
            assertNotNull(message9, button9)
            val message10 = "is view with id \"clearButton\" placed in activity?"
            assertFalse(idWarningMessage + "clearButton", clearButtonID == 0)
            assertTrue("clearButton$typeMismatch", clearButton is Button)
            assertNotNull(message10, clearButton)
            val message11 = "is view with id \"equalButton\" placed in activity?"
            assertFalse(idWarningMessage + "equalButton", equalButtonID == 0)
            assertTrue("equalButton$typeMismatch", equalButton is Button)
            assertNotNull(message11, equalButton)
            val message12 = "is view with id \"addButton\" placed in activity?"
            assertFalse(idWarningMessage + "addButton", addButtonID == 0)
            assertTrue("addButton$typeMismatch", addButton is Button)
            assertNotNull(message12, addButton)
            val message13 = "is view with id \"divideButton\" placed in activity?"
            assertFalse(idWarningMessage + "divideButton", divideButtonID == 0)
            assertTrue("divideButton$typeMismatch", divideButton is Button)
            assertNotNull(message13, divideButton)
            val message14 = "is view with id \"subtractButton\" placed in activity?"
            assertFalse(idWarningMessage + "subtractButton", subtractButtonID == 0)
            assertTrue("subtractButton$typeMismatch", subtractButton is Button)
            assertNotNull(message14, subtractButton)
            val message15 = "is view with id \"multiplyButton\" placed in activity?"
            assertFalse(idWarningMessage + "multiplyButton", multiplyButtonID == 0)
            assertTrue("multiplyButton$typeMismatch", multiplyButton is Button)
            assertNotNull(message15, multiplyButton)
            val message16 = "is view with id \"dotButton\" placed in activity?"
            assertFalse(idWarningMessage + "dotButton", dotButtonID == 0)
            assertTrue("dotButton$typeMismatch", dotButton is Button)
            assertNotNull(message16, dotButton)
        }

        @Test
        fun testShouldCheckButtonsText() {
            val message = "There's nothing in button0 property \"text\""
            assertEquals(message, "0", activity.findViewById<Button>(button0ID).text)
            val message1 = "There's nothing in button1 property \"text\""
            assertEquals(message1, "1", activity.findViewById<Button>(button1ID).text)
            val message2 = "There's nothing in button2 property \"text\""
            assertEquals(message2, "2", activity.findViewById<Button>(button2ID).text)
            val message3 = "There's nothing in button3 property \"text\""
            assertEquals(message3, "3", activity.findViewById<Button>(button3ID).text)
            val message4 = "There's nothing in button4 property \"text\""
            assertEquals(message4, "4", activity.findViewById<Button>(button4ID).text)
            val message5 = "There's nothing in button5 property \"text\""
            assertEquals(message5, "5", activity.findViewById<Button>(button5ID).text)
            val message6 = "There's nothing in button6 property \"text\""
            assertEquals(message6, "6", activity.findViewById<Button>(button6ID).text)
            val message7 = "There's nothing in button7 property \"text\""
            assertEquals(message7, "7", activity.findViewById<Button>(button7ID).text)
            val message8 = "There's nothing in button8 property \"text\""
            assertEquals(message8, "8", activity.findViewById<Button>(button8ID).text)
            val message9 = "There's nothing in button9 property \"text\""
            assertEquals(message9, "9", activity.findViewById<Button>(button9ID).text)
        }

    }
  learner_created: false
- name: src/main/res/values/dimen.xml
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/190/stages/949/implement#comment
status: Failed
feedback:
  message: 'java.lang.RuntimeException: java.lang.IllegalAccessException: Can not
    set static final org.robolectric.internal.IShadow field org.robolectric.shadow.api.Shadow.SHADOW_IMPL
    to org.robolectric.internal.bytecode.ShadowImpl'
  time: Wed, 29 Dec 2021 15:19:08 UTC
record: -1
